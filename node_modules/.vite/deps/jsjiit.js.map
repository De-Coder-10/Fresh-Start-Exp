{
  "version": 3,
  "sources": ["../../jsjiit/src/exceptions.js", "../../jsjiit/src/registration.js", "../../jsjiit/src/attendance.js", "../../jsjiit/src/exam.js", "../../jsjiit/src/utils.js", "../../jsjiit/src/encryption.js", "../../jsjiit/src/wrapper.js"],
  "sourcesContent": ["/**\n * @module Exceptions\n */\n/**\n * Error classes for handling various API and session-related exceptions\n * @class APIError\n * @extends {Error} Base JavaScript Error class\n * @param {string} message - Error message describing what went wrong\n * @description Base class for API-related errors. Thrown when there is a general API error that doesn't fit other categories.\n */\nexport class APIError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\n/**\n * Error classes for handling various API and session-related exceptions\n * @class LoginError\n * @extends {APIError} Base API error class\n * @param {string} message - Error message describing what went wrong\n * @description Error thrown during login attempts. Indicates authentication failed, invalid credentials, or other login-specific issues.\n */\nexport class LoginError extends APIError {\n  constructor(message) {\n    super(message);\n    this.name = 'LoginError';\n  }\n}\n\n/**\n * Error classes for handling various API and session-related exceptions\n * @class SessionError\n * @extends {Error} Base JavaScript Error class\n * @param {string} message - Error message describing what went wrong\n * @description Base class for session-related errors. Handles issues with user sessions and authentication state.\n */\nexport class SessionError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'SessionError';\n  }\n}\n\n/**\n * Error classes for handling various API and session-related exceptions\n * @class SessionExpired\n * @extends {SessionError} Base session error class\n * @param {string} message - Error message describing what went wrong\n * @description Error thrown when the user's session has expired. Indicates the user needs to log in again to refresh their session.\n */\nexport class SessionExpired extends SessionError {\n  constructor(message) {\n    super(message);\n    this.name = 'SessionExpired';\n  }\n}\n\n/**\n * Error classes for handling various API and session-related exceptions\n * @class NotLoggedIn\n * @extends {SessionError} Base session error class\n * @param {string} message - Error message describing what went wrong\n * @description Error thrown when attempting authenticated operations without being logged in. Indicates the user needs to log in before accessing protected resources.\n */\nexport class NotLoggedIn extends SessionError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotLoggedIn';\n  }\n}\n\n/**\n * Error classes for handling various API and session-related exceptions\n * @class AccountAPIError\n * @extends {Error} Base JavaScript Error class\n * @param {string} message - Error message describing what went wrong\n * @description Error thrown during account management operations. Handles errors related to account actions like password changes.\n */\nexport class AccountAPIError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'AccountAPIError';\n  }\n}\n", "/**\n * @module Registration\n */\nexport class RegisteredSubject {\n  /**\n   * Class containing registered subject info like Lecturer name, credits, etc\n   * @param {string} employee_name - Name of the employee/lecturer\n   * @param {string} employee_code - Code of the employee\n   * @param {string} minor_subject - Minor subject information\n   * @param {string} remarks - Any remarks\n   * @param {string} stytype - Style type\n   * @param {number} credits - Number of credits\n   * @param {string} subject_code - Code of the subject\n   * @param {string} subject_component_code - Component code of the subject\n   * @param {string} subject_desc - Description of the subject\n   * @param {string} subject_id - ID of the subject\n   * @param {string} audtsubject - Audit subject information\n   */\n  constructor(\n    employee_name,\n    employee_code,\n    minor_subject,\n    remarks,\n    stytype,\n    credits,\n    subject_code,\n    subject_component_code,\n    subject_desc,\n    subject_id,\n    audtsubject\n  ) {\n    this.employee_name = employee_name;\n    this.employee_code = employee_code;\n    this.minor_subject = minor_subject;\n    this.remarks = remarks;\n    this.stytype = stytype;\n    this.credits = credits;\n    this.subject_code = subject_code;\n    this.subject_component_code = subject_component_code;\n    this.subject_desc = subject_desc;\n    this.subject_id = subject_id;\n    this.audtsubject = audtsubject;\n  }\n\n  /**\n   * Static method to create a RegisteredSubject from a JSON object\n   * @param {object} resp - JSON object representing RegisteredSubject\n   * @returns {RegisteredSubject} A new RegisteredSubject instance\n   */\n  static from_json(resp) {\n    return new RegisteredSubject(\n      resp[\"employeename\"],\n      resp[\"employeecode\"],\n      resp[\"minorsubject\"],\n      resp[\"remarks\"],\n      resp[\"stytype\"],\n      resp[\"credits\"],\n      resp[\"subjectcode\"],\n      resp[\"subjectcomponentcode\"],\n      resp[\"subjectdesc\"],\n      resp[\"subjectid\"],\n      resp[\"audtsubject\"]\n    );\n  }\n}\n\nexport class Registrations {\n  /**\n   * Class containing all registered subjects and total course credits for the semester\n   * @param {object} resp - JSON response object with registrations and total credits\n   */\n  constructor(resp) {\n    this.raw_response = resp;\n    this.total_credits = resp[\"totalcreditpoints\"];\n    this.subjects = resp[\"registrations\"].map(RegisteredSubject.from_json);\n  }\n}\n", "/**\n * @module Attendance\n */\nexport class AttendanceHeader {\n  /**\n   * Class which contains header info in the Attendance API\n   * @param {string} branchdesc - Description of the branch\n   * @param {string} name - Name of the student or entity\n   * @param {string} programdesc - Description of the program\n   * @param {string} stynumber - Style number or identifier\n   */\n  constructor(branchdesc, name, programdesc, stynumber) {\n    this.branchdesc = branchdesc;\n    this.name = name;\n    this.programdesc = programdesc;\n    this.stynumber = stynumber;\n  }\n\n  /**\n   * Static method to create an AttendanceHeader from a JSON object\n   * @param {object} resp - JSON object representing AttendanceHeader\n   * @returns {AttendanceHeader} A new AttendanceHeader instance\n   */\n  static from_json(resp) {\n    return new AttendanceHeader(resp.branchdesc, resp.name, resp.programdesc, resp.stynumber);\n  }\n}\n\nexport class Semester {\n  /**\n   * Class which contains Semester info\n   * @param {string} registration_code - Registration code of the semester\n   * @param {string} registration_id - Registration ID of the semester\n   */\n  constructor(registration_code, registration_id) {\n    this.registration_code = registration_code;\n    this.registration_id = registration_id;\n  }\n\n  /**\n   * Static method to create a Semester from a JSON object\n   * @param {object} resp - JSON object representing Semester\n   * @returns {Semester} A new Semester instance\n   */\n  static from_json(resp) {\n    return new Semester(resp.registrationcode, resp.registrationid);\n  }\n}\n\nexport class AttendanceMeta {\n  /**\n   * Class which contains metadata for Attendance\n   * @param {object} resp - JSON response object with headers and semesters\n   */\n  constructor(resp) {\n    this.raw_response = resp;\n    this.headers = resp.headerlist.map(AttendanceHeader.from_json);\n    this.semesters = resp.semlist.map(Semester.from_json);\n  }\n\n  /**\n   * Returns the latest AttendanceHeader\n   * @returns {AttendanceHeader} The first header in the list\n   */\n  latest_header() {\n    return this.headers[0];\n  }\n\n  /**\n   * Returns the latest Semester\n   * @returns {Semester} The first semester in the list\n   */\n  latest_semester() {\n    return this.semesters[0];\n  }\n}", "/**\n * @module Exams\n */\nexport class ExamEvent {\n  /**\n   * Class containing exam event info\n   * @param {string} exam_event_code - Code of the exam event\n   * @param {number} event_from - Event from timestamp\n   * @param {string} exam_event_desc - Description of the exam event\n   * @param {string} registration_id - Registration ID\n   * @param {string} exam_event_id - Exam event ID\n   */\n  constructor(exam_event_code, event_from, exam_event_desc, registration_id, exam_event_id) {\n    this.exam_event_code = exam_event_code;\n    this.event_from = event_from;\n    this.exam_event_desc = exam_event_desc;\n    this.registration_id = registration_id;\n    this.exam_event_id = exam_event_id;\n  }\n\n  /**\n   * Static method to create an ExamEvent from a JSON object\n   * @param {object} resp - JSON object representing ExamEvent\n   * @returns {ExamEvent} A new ExamEvent instance\n   */\n  static from_json(resp) {\n    return new ExamEvent(\n      resp[\"exameventcode\"],\n      resp[\"eventfrom\"],\n      resp[\"exameventdesc\"],\n      resp[\"registrationid\"],\n      resp[\"exameventid\"]\n    );\n  }\n}\n", "/**\n * @module Utils\n */\n/**\n * Generates a date sequence string from a given date or current date\n * The sequence format is: d[0]m[0]y[0]w[0]d[1]m[1]y[1] where:\n * d = day padded to 2 digits\n * m = month padded to 2 digits\n * y = last 2 digits of year\n * w = weekday number (0-6)\n * @param {Date} [date=null] - Date object to generate sequence from. If null, uses current date\n * @returns {string} The generated date sequence string\n */\nexport function generate_date_seq(date = null) {\n  if (date === null) {\n    date = new Date();\n  }\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Months are 0-indexed in JS\n  const year = String(date.getFullYear()).slice(2);\n  const weekday = String(date.getDay());\n\n  return day[0] + month[0] + year[0] + weekday + day[1] + month[1] + year[1];\n}\n\n/**\n * Generates a random string of specified length using alphanumeric characters\n * @param {number} n - Length of random string to generate\n * @returns {string} Random string of length n containing alphanumeric characters\n */\nexport function get_random_char_seq(n) {\n  const charset = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let result = \"\";\n\n  for (let i = 0; i < n; i++) {\n    const randomIndex = Math.floor(Math.random() * charset.length);\n    result += charset[randomIndex];\n  }\n\n  return result;\n}\n", "import { generate_date_seq, get_random_char_seq } from \"./utils.js\";\n\n/**\n * @module Encryption\n */\n/**\n * Encodes binary data to base64 string\n * @param {Uint8Array} data - Binary data to encode\n * @returns {string} Base64 encoded string\n */\nexport function base64Encode(data) {\n  return btoa(String.fromCharCode.apply(null, new Uint8Array(data)));\n}\n\n/**\n * Decodes base64 string to binary data\n * @param {string} data - Base64 string to decode\n * @returns {Uint8Array} Decoded binary data\n */\nexport function base64Decode(data) {\n  return Uint8Array.from(atob(data), (c) => c.charCodeAt(0));\n}\n\n// Initialization Vector (IV)\nconst IV = new TextEncoder().encode(\"dcek9wb8frty1pnm\");\n\n/**\n * Generates an AES key based on date sequence\n * @param {Date} [date=null] - Optional date to use for key generation\n * @returns {Promise<CryptoKey>} Generated AES-CBC key\n */\nexport async function generate_key(date = null) {\n  const dateSeq = generate_date_seq(date);\n  const keyData = new TextEncoder().encode(\"qa8y\" + dateSeq + \"ty1pn\");\n  return window.crypto.subtle.importKey(\"raw\", keyData, { name: \"AES-CBC\" }, false, [\"encrypt\", \"decrypt\"]);\n}\n\n/**\n * Generates an encrypted local name for request headers\n * @param {Date} [date=null] - Optional date to use for name generation\n * @returns {Promise<string>} Base64 encoded encrypted local name\n */\nexport async function generate_local_name(date = null) {\n  const randomCharSeq = get_random_char_seq(4);\n  const dateSeq = generate_date_seq(date);\n  const randomSuffix = get_random_char_seq(5);\n  const nameBytes = new TextEncoder().encode(randomCharSeq + dateSeq + randomSuffix);\n  const encryptedBytes = await encrypt(nameBytes);\n\n  return base64Encode(encryptedBytes);\n}\n\n/**\n * Encrypts data using AES-CBC\n * @param {Uint8Array} data - Data to encrypt\n * @returns {Promise<Uint8Array>} Encrypted data\n */\nexport async function encrypt(data) {\n  const key = await generate_key();\n  const encrypted = await window.crypto.subtle.encrypt({ name: \"AES-CBC\", iv: IV }, key, data);\n  return new Uint8Array(encrypted);\n}\n\n/**\n * Decrypts data using AES-CBC\n * @param {Uint8Array} data - Data to decrypt\n * @returns {Promise<Uint8Array>} Decrypted data\n */\nexport async function decrypt(data) {\n  const key = await generate_key();\n  const decrypted = await window.crypto.subtle.decrypt({ name: \"AES-CBC\", iv: IV }, key, data);\n  return new Uint8Array(decrypted);\n}\n\n/**\n * Deserializes an encrypted base64 payload\n * @param {string} payload - Base64 encoded encrypted payload\n * @returns {Promise<object>} Decrypted and parsed JSON object\n */\nexport async function deserialize_payload(payload) {\n  const pbytes = base64Decode(payload);\n  const raw = await decrypt(pbytes);\n  return JSON.parse(new TextDecoder().decode(raw));\n}\n\n/**\n * Serializes and encrypts a payload object\n * @param {object} payload - Object to serialize and encrypt\n * @returns {Promise<string>} Base64 encoded encrypted payload\n */\nexport async function serialize_payload(payload) {\n  const raw = new TextEncoder().encode(JSON.stringify(payload));\n  const pbytes = await encrypt(raw);\n  return base64Encode(pbytes);\n}\n", "import { NotLoggedIn, SessionExpired, SessionError, AccountAPIError, LoginError, APIError } from \"./exceptions.js\";\nimport { RegisteredSubject, Registrations } from \"./registration.js\";\nimport { AttendanceMeta, AttendanceHeader, Semester } from \"./attendance.js\";\nimport { ExamEvent } from \"./exam.js\";\nimport { generate_local_name, serialize_payload } from \"./encryption.js\";\n\n/**\n * @module Wrapper\n */\n/**\n * Base API endpoint for the JIIT web portal\n * @constant {string}\n */\nexport const API = \"https://webportal.jiit.ac.in:6011/StudentPortalAPI\";\n\n/**\n * Default CAPTCHA values used for login\n * @constant {{captcha: string, hidden: string}}\n */\nexport const DEFCAPTCHA = { captcha: \"phw5n\", hidden: \"gmBctEffdSg=\" };\n\n/**\n * Class representing a session with the web portal\n */\nexport class WebPortalSession {\n  /**\n   * Creates a WebPortalSession instance from API response\n   * @param {Object} resp - Response object from login API\n   * @param {Object} resp.regdata - Registration data containing user details\n   * @param {Array} resp.regdata.institutelist - List of institutes user has access to\n   * @param {string} resp.regdata.memberid - Member ID of the user\n   * @param {string} resp.regdata.userid - User ID\n   * @param {string} resp.regdata.token - Token for authentication\n   * @param {string} resp.regdata.clientid - Client ID\n   * @param {string} resp.regdata.membertype - Type of member\n   * @param {string} resp.regdata.name - Name of the user\n   * @param {string} resp.regdata.enrollmentno - Enrollment number\n   */\n  constructor(resp) {\n    this.raw_response = resp;\n    this.regdata = resp[\"regdata\"];\n\n    let institute = this.regdata[\"institutelist\"][0];\n    this.institute = institute[\"label\"];\n    this.instituteid = institute[\"value\"];\n    this.memberid = this.regdata[\"memberid\"];\n    this.userid = this.regdata[\"userid\"];\n\n    this.token = this.regdata[\"token\"];\n    let expiry_timestamp = JSON.parse(atob(this.token.split(\".\")[1]))[\"exp\"];\n    this.expiry = new Date(expiry_timestamp * 1000); // In JavaScript, Date expects milliseconds\n\n    this.clientid = this.regdata[\"clientid\"];\n    this.membertype = this.regdata[\"membertype\"];\n    this.name = this.regdata[\"name\"];\n    this.enrollmentno = this.regdata[\"enrollmentno\"];\n  }\n\n  /**\n   * Generates authentication headers for API requests\n   * @returns {Promise<Object>} Headers object containing Authorization and LocalName\n   */\n  async get_headers() {\n    const localname = await generate_local_name();\n    return {\n      Authorization: `Bearer ${this.token}`,\n      LocalName: localname,\n    };\n  }\n}\n\n/**\n * Main class for interacting with the JIIT web portal API\n */\nexport class WebPortal {\n  /**\n   * Creates a WebPortal instance\n   */\n  constructor() {\n    this.session = null;\n  }\n\n  /**\n   * Internal method to make HTTP requests to the API\n   * @private\n   * @param {string} method - HTTP method (GET, POST etc)\n   * @param {string} url - API endpoint URL\n   * @param {Object} [options={}] - Request options\n   * @param {Object} [options.headers] - Additional headers\n   * @param {Object} [options.json] - JSON payload\n   * @param {string} [options.body] - Raw body payload\n   * @param {boolean} [options.authenticated] - Whether request needs authentication\n   * @param {Error} [options.exception] - Custom error class to throw\n   * @returns {Promise<Object>} API response\n   * @throws {APIError} On API or network errors\n   */\n  async __hit(method, url, options = {}) {\n    let exception = APIError; // Default exception\n    if (options.exception) {\n      exception = options.exception;\n      delete options.exception;\n    }\n\n    console.log(options);\n    let header;\n    if (options.authenticated) {\n      header = await this.session.get_headers(); // Assumes calling method is authenticated\n      delete options.authenticated;\n    } else {\n      let localname = await generate_local_name();\n      header = { LocalName: localname };\n    }\n\n    if (options.headers) {\n      options.headers = { ...options.headers, ...header };\n    } else {\n      options.headers = header;\n    }\n\n    let fetchOptions = {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options.headers,\n      },\n    };\n\n    if (options.json) {\n      fetchOptions.body = JSON.stringify(options.json);\n    } else {\n      fetchOptions.body = options.body;\n    }\n\n    try {\n      console.log(\"fetching\", url, \"with options\", fetchOptions);\n      const response = await fetch(url, fetchOptions);\n\n      if (response.status === 513) {\n        throw new exception(\"JIIT Web Portal server is temporarily unavailable (HTTP 513). Please try again later.\");\n      }\n      if (response.status === 401) {\n        throw new SessionExpired(response.error);\n      }\n\n      const resp = await response.json();\n\n      if (resp.status && resp.status.responseStatus !== \"Success\") {\n        throw new exception(`status:\\n${JSON.stringify(resp.status, null, 2)}`);\n      }\n      return resp;\n    } catch (error) {\n      // Handle CORS errors\n      if (error instanceof TypeError && error.message.includes(\"CORS\")) {\n        throw new exception(\"JIIT Web Portal server is temporarily unavailable. Please try again later.\");\n      }\n      throw new exception(error.message || \"Unknown error\");\n    }\n  }\n\n  /**\n   * Logs in a student user\n   * @param {string} username - Student username\n   * @param {string} password - Student password\n   * @param {{captcha: string, hidden: string}} [captcha=DEFCAPTCHA] - CAPTCHA\n   * @returns {Promise<WebPortalSession>} New session instance\n   * @throws {LoginError} On login failure\n   */\n  async student_login(username, password, captcha = DEFCAPTCHA) {\n    let pretoken_endpoint = \"/token/pretoken-check\";\n    let token_endpoint = \"/token/generate-token1\";\n\n    let payload = { username: username, usertype: \"S\", captcha: captcha };\n    payload = await serialize_payload(payload);\n\n    let resp = await this.__hit(\"POST\", API + pretoken_endpoint, { body: payload, exception: LoginError });\n\n    let payload2 = resp[\"response\"];\n    delete payload2[\"rejectedData\"];\n    payload2[\"Modulename\"] = \"STUDENTMODULE\";\n    payload2[\"passwordotpvalue\"] = password;\n    payload2 = await serialize_payload(payload2);\n\n    const resp2 = await this.__hit(\"POST\", API + token_endpoint, { body: payload2, exception: LoginError });\n    this.session = new WebPortalSession(resp2[\"response\"]);\n    return this.session;\n  }\n\n  /**\n   * Gets personal information of logged in student\n   * @returns {Promise<Object>} Student personal information\n   */\n  async get_personal_info() {\n    const ENDPOINT = \"/studentpersinfo/getstudent-personalinformation\";\n    const payload = {\n      clinetid: \"SOAU\",\n      instituteid: this.session.instituteid,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets bank account information of logged in student\n   * @returns {Promise<Object>} Student bank information\n   */\n  async get_student_bank_info() {\n    const ENDPOINT = \"/studentbankdetails/getstudentbankinfo\";\n    const payload = {\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Changes password for logged in student\n   * @param {string} old_password - Current password\n   * @param {string} new_password - New password\n   * @returns {Promise<Object>} Response indicating success/failure\n   * @throws {AccountAPIError} On password change failure\n   */\n  async change_password(old_password, new_password) {\n    const ENDPOINT = \"/clxuser/changepassword\";\n    const payload = {\n      membertype: this.session.membertype,\n      oldpassword: old_password,\n      newpassword: new_password,\n      confirmpassword: new_password,\n    };\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, {\n      json: payload,\n      authenticated: true,\n      exception: AccountAPIError,\n    });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets attendance metadata including headers and semesters\n   * @returns {Promise<AttendanceMeta>} Attendance metadata\n   */\n  async get_attendance_meta() {\n    const ENDPOINT = \"/StudentClassAttendance/getstudentInforegistrationforattendence\";\n\n    const payload = {\n      clientid: this.session.clientid,\n      instituteid: this.session.instituteid,\n      membertype: this.session.membertype,\n    };\n\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return new AttendanceMeta(resp[\"response\"]);\n  }\n\n  /**\n   * Gets attendance details for a semester\n   * @param {AttendanceHeader} header - Attendance header\n   * @param {Semester} semester - Semester object\n   * @returns {Promise<Object>} Attendance details\n   */\n  async get_attendance(header, semester) {\n    const ENDPOINT = \"/StudentClassAttendance/getstudentattendancedetail\";\n\n    const payload = await serialize_payload({\n      clientid: this.session.clientid,\n      instituteid: this.session.instituteid,\n      registrationcode: semester.registration_code,\n      registrationid: semester.registration_id,\n      stynumber: header.stynumber,\n    });\n\n    // console.log(payload)\n\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets attendance for every class of the subject for the semester.\n   * @param {Semester} semester - Semester object\n   * @param {string} subjectid - Subject ID\n   * @param {string} individualsubjectcode - Individual subject code\n   * @param {Array<string>} subjectcomponentids - Array of subject component IDs\n   * @returns {Promise<Object>} Subject attendance details\n   */\n  async get_subject_daily_attendance(semester, subjectid, individualsubjectcode, subjectcomponentids) {\n    const ENDPOINT = \"/StudentClassAttendance/getstudentsubjectpersentage\";\n    const payload = await serialize_payload({\n      cmpidkey: subjectcomponentids.map((id) => ({ subjectcomponentid: id })),\n      clientid: this.session.clientid,\n      instituteid: this.session.instituteid,\n      registrationcode: semester.registration_code,\n      registrationid: semester.registration_id,\n      subjectcode: individualsubjectcode,\n      subjectid: subjectid,\n    });\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets list of registered semesters\n   * @returns {Promise<Array<Semester>>} Array of semester objects\n   */\n  async get_registered_semesters() {\n    const ENDPOINT = \"/reqsubfaculty/getregistrationList\";\n\n    const payload = await serialize_payload({\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n    });\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"registrations\"].map((i) => Semester.from_json(i));\n  }\n\n  /**\n   * Gets registered subjects and faculty details for a semester\n   * @param {Semester} semester - Semester object\n   * @returns {Promise<Registrations>} Registration details\n   */\n  async get_registered_subjects_and_faculties(semester) {\n    const ENDPOINT = \"/reqsubfaculty/getfaculties\";\n    const payload = await serialize_payload({\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n      registrationid: semester.registration_id,\n    });\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return new Registrations(resp[\"response\"]);\n  }\n\n  /**\n   * Gets semesters that have exam events\n   * @returns {Promise<Array<Semester>>} Array of semester objects\n   */\n  async get_semesters_for_exam_events() {\n    const ENDPOINT = \"/studentcommonsontroller/getsemestercode-withstudentexamevents\";\n    const payload = await serialize_payload({\n      clientid: this.session.clientid,\n      instituteid: this.session.instituteid,\n      memberid: this.session.memberid,\n    });\n\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"semesterCodeinfo\"][\"semestercode\"].map((i) => Semester.from_json(i));\n  }\n\n  /**\n   * Gets exam events for a semester\n   * @param {Semester} semester - Semester object\n   * @returns {Promise<Array<ExamEvent>>} Array of exam event objects\n   */\n  async get_exam_events(semester) {\n    const ENDPOINT = \"/studentcommonsontroller/getstudentexamevents\";\n    const payload = await serialize_payload({\n      instituteid: this.session.instituteid,\n      registationid: semester.registration_id, // not a typo\n    });\n\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"eventcode\"][\"examevent\"].map((i) => ExamEvent.from_json(i));\n  }\n\n  /**\n   * Gets exam schedule for an exam event\n   * @param {ExamEvent} exam_event - Exam event object\n   * @returns {Promise<Object>} Exam schedule details\n   */\n  async get_exam_schedule(exam_event) {\n    const ENDPOINT = \"/studentsttattview/getstudent-examschedule\";\n    const payload = await serialize_payload({\n      instituteid: this.session.instituteid,\n      registrationid: exam_event.registration_id,\n      exameventid: exam_event.exam_event_id,\n    });\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets semesters that have marks available\n   * @returns {Promise<Array<Semester>>} Array of semester objects\n   */\n  async get_semesters_for_marks() {\n    const ENDPOINT = \"/studentcommonsontroller/getsemestercode-exammarks\";\n    const payload = await serialize_payload({\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n    });\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"semestercode\"].map((i) => Semester.from_json(i));\n  }\n\n  /**\n   * Downloads marks PDF for a semester\n   * @param {Semester} semester - Semester object\n   * @throws {APIError} On download failure\n   */\n  async download_marks(semester) {\n    const ENDPOINT =\n      \"/studentsexamview/printstudent-exammarks/\" +\n      // this.session.memberid +\n      // \"/\" +\n      this.session.instituteid +\n      \"/\" +\n      semester.registration_id +\n      \"/\" +\n      semester.registration_code;\n    const localname = await generate_local_name();\n    let _headers = await this.session.get_headers(localname);\n    const fetchOptions = {\n      method: \"GET\",\n      headers: _headers,\n    };\n\n    try {\n      const resp = await fetch(API + ENDPOINT, fetchOptions);\n      const blob = await resp.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `marks_${semester.registration_code}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      a.remove();\n    } catch (error) {\n      throw new APIError(error);\n    }\n  }\n\n  /**\n   * Gets semesters that have grade cards available\n   * @returns {Promise<Array<Semester>>} Array of semester objects\n   */\n  async get_semesters_for_grade_card() {\n    const ENDPOINT = \"/studentgradecard/getregistrationList\";\n    const payload = await serialize_payload({\n      instituteid: this.session.instituteid,\n    });\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"registrations\"].map((i) => Semester.from_json(i));\n  }\n\n  /**\n   * Gets program ID for grade card\n   * @private\n   * @returns {Promise<string>} Program ID\n   */\n  async __get_program_id() {\n    const ENDPOINT = \"/studentgradecard/getstudentinfo\";\n    const payload = await serialize_payload({\n      instituteid: this.session.instituteid,\n    });\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"programid\"];\n  }\n\n  /**\n   * Gets grade card for a semester\n   * @param {Semester} semester - Semester object\n   * @returns {Promise<Object>} Grade card details\n   */\n  async get_grade_card(semester) {\n    const programid = await this.__get_program_id();\n    const ENDPOINT = \"/studentgradecard/showstudentgradecard\";\n    const payload = await serialize_payload({\n      branchid: this.session.branch_id,\n      instituteid: this.session.instituteid,\n      programid: programid,\n      registrationid: semester.registration_id,\n    });\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  /**\n   * Gets current semester number\n   * @private\n   * @returns {Promise<number>} Current semester number\n   */\n  async __get_semester_number() {\n    const ENDPOINT = \"/studentsgpacgpa/checkIfstudentmasterexist\";\n    const payload = await serialize_payload({\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n      name: this.session.name,\n      enrollmentno: this.session.enrollmentno,\n    });\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"][\"studentlov\"][\"currentsemester\"];\n  }\n\n  /**\n   * Gets SGPA and CGPA details\n   * @returns {Promise<Object>} SGPA and CGPA details\n   */\n  async get_sgpa_cgpa() {\n    const ENDPOINT = \"/studentsgpacgpa/getallsemesterdata\";\n    const stynumber = await this.__get_semester_number();\n    const payload = await serialize_payload({\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n      stynumber: stynumber,\n    });\n    const resp = await this.__hit(\"POST\", API + ENDPOINT, { json: payload, authenticated: true });\n    return resp[\"response\"];\n  }\n\n  async fill_feedback_form(feedback_option) {\n    const SEMESTER_ENDPOINT = \"/feedbackformcontroller/getFeedbackEvent\";\n    const payload = {\n      instituteid: this.session.instituteid,\n    };\n    const resp = await this.__hit(\"POST\", API + SEMESTER_ENDPOINT, { json: payload, authenticated: true });\n    let semesters = resp[\"response\"][\"eventList\"];\n    let latest_semester = semesters[semesters.length - 1];\n    let latest_semester_code = latest_semester[\"eventcode\"];\n    let latest_semester_event_id = latest_semester[\"eventid\"];\n    let latest_semester_event_description = latest_semester[\"eventdescription\"];\n\n    const GRID_ENDPOINT = \"/feedbackformcontroller/getGriddataForFeedback\";\n    const grid_payload = await serialize_payload({\n      instituteid: this.session.instituteid,\n      studentid: this.session.memberid,\n      eventid: latest_semester_event_id,\n    });\n    const grid_resp = await this.__hit(\"POST\", API + GRID_ENDPOINT, { json: grid_payload, authenticated: true });\n    let grid_data = grid_resp[\"response\"][\"gridData\"];\n\n    // instituteid\n    // eventid\n    // eventdescription\n    let question_feedback_payload_array = grid_data.map((data) => {\n      return {\n        instituteid: this.session.instituteid,\n        eventid: latest_semester_event_id,\n        eventdescription: latest_semester_event_description,\n        facultyid: data[\"employeeid\"],\n        facultyname: data[\"employeename\"],\n        registrationid: data[\"registrationid\"],\n        studentid: data[\"studentid\"],\n        subjectcode: data[\"subjectcode\"],\n        subjectcomponentcode: data[\"subjectcomponentcode\"],\n        subjectcomponentid: data[\"subjectcomponentid\"],\n        subjectdescription: data[\"subjectdescription\"],\n        subjectid: data[\"subjectid\"],\n      };\n    });\n    const GET_QUESTIONS_ENDPOINT = \"/feedbackformcontroller/getIemQuestion\";\n    const SAVE_ENDPOINT = \"/feedbackformcontroller/savedatalist\";\n\n    for (let question_feedback_payload of question_feedback_payload_array) {\n      try {\n        const questions_api_resp = await this.__hit(\"POST\", API + GET_QUESTIONS_ENDPOINT, {\n          json: question_feedback_payload,\n          authenticated: true,\n        });\n      } catch (error) {\n        continue;\n      }\n\n      // Process the response to get the list of questions\n      if (!questions_api_resp || !questions_api_resp.response || !questions_api_resp.response.questionList) {\n        console.error(\n          \"Failed to retrieve question list or invalid response structure for payload:\",\n          question_feedback_payload,\n          \"Response:\",\n          questions_api_resp\n        );\n        // Skip to the next feedback item if data is missing\n        continue;\n      }\n      let actual_question_list = questions_api_resp[\"response\"][\"questionList\"];\n\n      // Update each question with the provided feedback_option\n      let questions_to_submit = actual_question_list.map((q) => ({\n        ...q, // Spread existing question properties\n        rating: feedback_option, // Set the rating using the function's argument\n      }));\n\n      // Construct the payload for saving the feedback\n      let save_data_payload = {\n        instituteid: question_feedback_payload.instituteid, // This comes from this.session.instituteid via map\n        studentid: this.session.memberid, // Logged-in user's ID\n        eventid: question_feedback_payload.eventid, // This comes from latest_semester_event_id via map\n        subjectid: question_feedback_payload.subjectid, // From the specific grid item\n        facultyid: question_feedback_payload.facultyid, // From the specific grid item\n        registrationid: question_feedback_payload.registrationid, // From the specific grid item\n        questionid: questions_to_submit, // The list of questions with updated ratings\n        facultycomments: null, // Defaulting to null; can be parameterized if needed\n        coursecomments: null, // Defaulting to null; can be parameterized if needed\n      };\n      save_data_payload = await serialize_payload(save_data_payload);\n\n      // Send the feedback data to the SAVE_ENDPOINT\n      await this.__hit(\"POST\", API + SAVE_ENDPOINT, {\n        json: save_data_payload,\n        authenticated: true,\n      });\n      // Optionally, collect or handle the response from SAVE_ENDPOINT\n    }\n  }\n}\n\n/**\n * Decorator that checks if user is authenticated before executing method\n * @param {Function} method - Method to decorate\n * @returns {Function} Decorated method that checks authentication\n * @throws {NotLoggedIn} If user is not logged in\n */\nfunction authenticated(method) {\n  return function (...args) {\n    if (this.session == null) {\n      throw new NotLoggedIn();\n    }\n    return method.apply(this, args);\n  };\n}\n\n/**\n * List of methods that require authentication\n * @constant {Array<string>}\n */\nconst authenticatedMethods = [\n  \"get_personal_info\",\n  \"get_student_bank_info\",\n  \"change_password\",\n  \"get_attendance_meta\",\n  \"get_attendance\",\n  \"get_subject_daily_attendance\",\n  \"get_registered_semesters\",\n  \"get_registered_subjects_and_faculties\",\n  \"get_semesters_for_exam_events\",\n  \"get_exam_events\",\n  \"get_exam_schedule\",\n  \"get_semesters_for_marks\",\n  \"download_marks\",\n  \"get_semesters_for_grade_card\",\n  \"__get_program_id\",\n  \"get_grade_card\",\n  \"__get_semester_number\",\n  \"get_sgpa_cgpa\",\n];\n\nauthenticatedMethods.forEach((methodName) => {\n  WebPortal.prototype[methodName] = authenticated(WebPortal.prototype[methodName]);\n});\n"],
  "mappings": "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",
  "names": ["questions_api_resp"]
}
